.post-detail.card
  .image-box
    .swiper-container
      .swiper-wrapper
        - @post.images.each do |image|
          .swiper-slide
            = image_tag image.url
      .swiper-pagination

  .image-info-box
    .profile-box.p-3
      .d-flex.align-items-center
        = image_tag @post.user.avatar.url, size: '40x40', class: 'rounded-circle mr-1'
        = @post.user.username
        / ログイン時かつ自身の投稿の場合は編集削除ができる分岐を導入する
        - if logged_in? && @post.user_id == current_user.id
          .ml-auto
            = link_to post_path(@post), class: 'mr-3', method: :delete, data: {confirm: '本当に削除しますか？'} do
              = icon 'far', 'trash-alt', class: 'fa-lg'
            = link_to edit_post_path(@post) do
              = icon 'far', 'edit', class: 'fa-lg'

        / ログイン時かつ自身の投稿でない場合は"いいね"ができる分岐を導入する
        - if logged_in? && @post.user_id != current_user.id
          .ml-auto
            = render 'like_area', post: @post

    hr.m-0
    .post-body.p-3
      / 投稿の本文
      .row.no-gutters
        .col-2
          = image_tag @post.user.avatar.url, size: '40x40', class: 'rounded-circle'
        .col-10
          / railsのsimple_formatメソッドを使用し、入力時の改行等を反映できるようにする
          = simple_format(@post.body)
      hr
      / コメント一覧
      = render 'comments/comments', comments: @comments

    - if logged_in?
      / 非ログイン時にフォーム非表示。
      hr.m-0
      .post-comment.p-3
        / 新規コメント投稿フォーム
        = form_with model: [@post, @comment], class: 'd-flex mb-0 flex-nowrap justify-content-between', remote: true do |f|
          = f.text_field :body, class: 'form-control input-comment-body', placeholder: 'コメント'
          = f.submit '投稿', class: 'btn btn-primary btn-raised'
          / modelを[@post, @comment]と指定することで、formの送信先がcommentコントローラーのcreateアクションとなる(showページ内の場合)
          / remote: true という記述はjs形式でリクエストを送信するためのもの。非同期対応
    - else
      / 非ログイン時にはフォームの代わりに以下の案内を表示
      .post-comment.p-3
        | ※コメント投稿にはログインが必要です
